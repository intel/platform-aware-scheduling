name: Static Analysis

on:
  workflow_call:
    inputs:
      runsOn:
        required: false
        type: string
        default: 'ubuntu-latest'
      scanDir:
        required: false
        type: string
        default: '.'
      ignoreDir:
        required: false
        type: string
        default: ''
      workingDir:
        required: false
        default: '.'
        type: string
      goVersion:
        required: false
        type: string
        default: 1.18
      hadolintVersion:
        required: false
        type: string
        default: v2.10.0
      goLangCIVersion:
        required: false
        type: string
        default: v1.46.2
      goImportsVersion:
        required: false
        type: string
        default: v0.1.10
jobs:
  shellcheck:
    name: Shellcheck
    runs-on: ${{ inputs.runsOn }}
    steps:
      - uses: actions/checkout@v3
      - run: |
          wget -q https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz
          tar -xvf shellcheck-stable.linux.x86_64.tar.xz
          shellcheck-stable/shellcheck -V; find . -name '*.sh' -print -exec sha256sum {} \;; find . -type f \( -name "*.sh" \) -print -exec shellcheck-stable/shellcheck -a -s bash -S warning -f gcc {} \;;
        shell: bash

  hadolint:
    name: Hadolint
    runs-on: ${{ inputs.runsOn }}
    steps:
      - uses: actions/checkout@v2
      - run: wget -q https://github.com/hadolint/hadolint/releases/download/${{ inputs.hadolintVersion  }}/hadolint-Linux-x86_64 -O hadolint; chmod +x hadolint ; find ${{ inputs.scanDir }}  -type f \( -name "Dockerfile*" \) -print0 | xargs -n 1 -0 ./hadolint ;

  job-process-input:
    name: Process workflow input parameters
    runs-on: ${{ inputs.runsOn }}
    outputs:
      modules: ${{ steps.get-modules.outputs.value  }}
    steps:
      - id: get-modules
        run: |
          echo ${{ inputs.workingDir }} | echo "::set-output name=value::[\"$(sed -r 's/,/","/g')\"]"

  gofmt-imports:
    name: Gofmt & imports
    needs: job-process-input
    runs-on: ${{ inputs.runsOn }}
    strategy:
      matrix:
        modulename: ${{ fromJson(needs.job-process-input.outputs.modules)  }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ inputs.goVersion  }}
      - run: go install golang.org/x/tools/cmd/goimports@${{ inputs.goImportsVersion  }}; test -z $(goimports -l ${{ matrix.modulename }}) && test -z $(gofmt -l ${{ matrix.modulename }})

  golangci-run:
    name: Golang CI
    runs-on: ${{ inputs.runsOn }}
    strategy:
      matrix:
        workingdir: [extender, telemetry-aware-scheduling, gpu-aware-scheduling]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ inputs.goVersion  }}
      - name: Running golang CI for ${{matrix.workingdir}}
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@${{ inputs.goLangCIVersion }} && cd ./${{ matrix.workingdir }} && golangci-lint run --timeout=5m -v --color='always' && cd ..

