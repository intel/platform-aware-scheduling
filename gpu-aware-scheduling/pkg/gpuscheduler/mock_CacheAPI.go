// Copyright (C) 2022 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.10.6. DO NOT EDIT.

//go:build !validation
// +build !validation

// re-generate with 'make mock'

package gpuscheduler

import (
	mock "github.com/stretchr/testify/mock"
	kubernetes "k8s.io/client-go/kubernetes"

	v1 "k8s.io/api/core/v1"
)

// MockCacheAPI is an autogenerated mock type for the CacheAPI type
type MockCacheAPI struct {
	mock.Mock
}

// AdjustPodResourcesL provides a mock function with given fields: cache, pod, adj, annotation, tileAnnotation, nodeName
func (_m *MockCacheAPI) AdjustPodResourcesL(cache *Cache, pod *v1.Pod, adj bool, annotation string, tileAnnotation string, nodeName string) error {
	ret := _m.Called(cache, pod, adj, annotation, tileAnnotation, nodeName)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Cache, *v1.Pod, bool, string, string, string) error); ok {
		r0 = rf(cache, pod, adj, annotation, tileAnnotation, nodeName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchNode provides a mock function with given fields: cache, nodeName
func (_m *MockCacheAPI) FetchNode(cache *Cache, nodeName string) (*v1.Node, error) {
	ret := _m.Called(cache, nodeName)

	var r0 *v1.Node
	if rf, ok := ret.Get(0).(func(*Cache, string) *v1.Node); ok {
		r0 = rf(cache, nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Cache, string) error); ok {
		r1 = rf(cache, nodeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchPod provides a mock function with given fields: cache, podNS, podName
func (_m *MockCacheAPI) FetchPod(cache *Cache, podNS string, podName string) (*v1.Pod, error) {
	ret := _m.Called(cache, podNS, podName)

	var r0 *v1.Pod
	if rf, ok := ret.Get(0).(func(*Cache, string, string) *v1.Pod); ok {
		r0 = rf(cache, podNS, podName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Cache, string, string) error); ok {
		r1 = rf(cache, podNS, podName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeResourceStatus provides a mock function with given fields: cache, nodeName
func (_m *MockCacheAPI) GetNodeResourceStatus(cache *Cache, nodeName string) nodeResources {
	ret := _m.Called(cache, nodeName)

	var r0 nodeResources
	if rf, ok := ret.Get(0).(func(*Cache, string) nodeResources); ok {
		r0 = rf(cache, nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodeResources)
		}
	}

	return r0
}

// GetNodeTileStatus provides a mock function with given fields: cache, nodeName
func (_m *MockCacheAPI) GetNodeTileStatus(cache *Cache, nodeName string) nodeTiles {
	ret := _m.Called(cache, nodeName)

	var r0 nodeTiles
	if rf, ok := ret.Get(0).(func(*Cache, string) nodeTiles); ok {
		r0 = rf(cache, nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodeTiles)
		}
	}

	return r0
}

// NewCache provides a mock function with given fields: _a0
func (_m *MockCacheAPI) NewCache(_a0 kubernetes.Interface) *Cache {
	ret := _m.Called(_a0)

	var r0 *Cache
	if rf, ok := ret.Get(0).(func(kubernetes.Interface) *Cache); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cache)
		}
	}

	return r0
}
