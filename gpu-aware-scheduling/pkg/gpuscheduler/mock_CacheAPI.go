// Code generated by mockery v1.0.0. DO NOT EDIT.

// +build !validation
// re-generate with 'make mock'

package gpuscheduler

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
	kubernetes "k8s.io/client-go/kubernetes"
)

// MockCacheAPI is an autogenerated mock type for the CacheAPI type
type MockCacheAPI struct {
	mock.Mock
}

// FetchNode provides a mock function with given fields: cache, nodeName
func (_m *MockCacheAPI) FetchNode(cache *Cache, nodeName string) (*v1.Node, error) {
	ret := _m.Called(cache, nodeName)

	var r0 *v1.Node
	if rf, ok := ret.Get(0).(func(*Cache, string) *v1.Node); ok {
		r0 = rf(cache, nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Cache, string) error); ok {
		r1 = rf(cache, nodeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeResourceStatus provides a mock function with given fields: cache, nodeName
func (_m *MockCacheAPI) GetNodeResourceStatus(cache *Cache, nodeName string) nodeResources {
	ret := _m.Called(cache, nodeName)

	var r0 nodeResources
	if rf, ok := ret.Get(0).(func(*Cache, string) nodeResources); ok {
		r0 = rf(cache, nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodeResources)
		}
	}

	return r0
}

// NewCache provides a mock function with given fields: _a0
func (_m *MockCacheAPI) NewCache(_a0 kubernetes.Interface) *Cache {
	ret := _m.Called(_a0)

	var r0 *Cache
	if rf, ok := ret.Get(0).(func(kubernetes.Interface) *Cache); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cache)
		}
	}

	return r0
}
