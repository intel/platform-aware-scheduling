// Code generated by mockery v1.0.0. DO NOT EDIT.

// +build !validation
// re-generate with 'make mock'

package gpuscheduler

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
	kubernetes "k8s.io/client-go/kubernetes"
	rest "k8s.io/client-go/rest"
)

// MockClientAPI is an autogenerated mock type for the ClientAPI type
type MockClientAPI struct {
	mock.Mock
}

// GetPod provides a mock function with given fields: clientset, ns, name
func (_m *MockClientAPI) GetPod(clientset kubernetes.Interface, ns string, name string) (*v1.Pod, error) {
	ret := _m.Called(clientset, ns, name)

	var r0 *v1.Pod
	if rf, ok := ret.Get(0).(func(kubernetes.Interface, string, string) *v1.Pod); ok {
		r0 = rf(clientset, ns, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kubernetes.Interface, string, string) error); ok {
		r1 = rf(clientset, ns, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InClusterConfig provides a mock function with given fields:
func (_m *MockClientAPI) InClusterConfig() (*rest.Config, error) {
	ret := _m.Called()

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewForConfig provides a mock function with given fields: _a0
func (_m *MockClientAPI) NewForConfig(_a0 *rest.Config) (kubernetes.Interface, error) {
	ret := _m.Called(_a0)

	var r0 kubernetes.Interface
	if rf, ok := ret.Get(0).(func(*rest.Config) kubernetes.Interface); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*rest.Config) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePod provides a mock function with given fields: _a0, _a1
func (_m *MockClientAPI) UpdatePod(_a0 kubernetes.Interface, _a1 *v1.Pod) (*v1.Pod, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.Pod
	if rf, ok := ret.Get(0).(func(kubernetes.Interface, *v1.Pod) *v1.Pod); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kubernetes.Interface, *v1.Pod) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
